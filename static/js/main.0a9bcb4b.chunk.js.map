{"version":3,"sources":["actions/productAction.js","constants/productConstants.js","components/cardTitleAndText.js","components/card.js","store/history.js","components/productModal.js","components/index.js","components/navBar.js","components/cart.js","reducers/productReducer.js","reducers/rootReducer.js","sagas/productSaga.js","sagas/rootSaga.js","components/favList.js","serviceWorker.js","index.js","store/rootStore.js","logo.svg"],"names":["removeProductFromFav","data","id","type","CardTitleAndText","props","card","name","designer","onlyXItemsLeftStockLevel","price","currencyCode","retailPrice","Card","Title","Text","Col","md","Row","CardComponent","CardDeck","className","undefined","this","products","map","key","Img","variant","alt","src","media","main","dynamic","url","height","width","Body","Button","onClick","setModal","setProduct","addToCart","addProductToCart","isFavorite","addProductToFav","React","PureComponent","mapDispatchToProps","connect","state","allProucts","createBrowserHistory","clearModal","isModalOpen","isModalClose","selectedProduct","Modal","show","onHide","Header","closeButton","logo","Footer","history","push","handleCheckout","App","getAllProduct","Component","Navbar","bg","Brand","as","NavLink","to","Nav","Link","removeProductFromCart","cartBucket","cart","length","initialState","favList","rootReducer","combineReducers","action","content","filter","item","getAllProducts","watchProductCommands","Axios","get","then","res","responseBody","put","takeEvery","rootSaga","all","fork","Boolean","window","location","hostname","match","rootstore","enhancer","sagaMiddleware","createSagaMiddleware","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","compose","store","createStore","run","configureStore","ReactDOM","render","path","component","CartComponent","FavList","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0a9bcb4b.chunk.js","sourcesContent":["import {\n  SET_PRODUCT,\n  CLEAR_MODAL,\n  ADD_TO_CART,\n  SET_MODAL,\n  SET_ALL_PRODUCTS,\n  GET_ALL_PRODUCT,\n  ADD_PRODUCT_TO_FAV,\n  REMOVE_PRODUCT_FROM_CART,\n  REMOVE_PRODUCT_FROM_FAV\n} from '../constants/productConstants';\n\nexport const setProduct = data => ({\n  type: SET_PRODUCT,\n  data\n});\n\nexport const setModal = () => ({\n  type: SET_MODAL\n});\n\nexport const clearModal = () => ({\n  type: CLEAR_MODAL\n});\n\nexport const addToCart = data => ({\n  type: ADD_TO_CART,\n  data\n});\n\nexport const getAllProduct = () => ({\n  type: GET_ALL_PRODUCT\n});\n\nexport const setAllProducts = data => ({\n  type: SET_ALL_PRODUCTS,\n  data\n});\n\nexport const addProductToFav = (data, id) => ({\n  type: ADD_PRODUCT_TO_FAV,\n  data,\n  id\n});\n\nexport const removeProductFromFav = (data, id) => ({\n  type: REMOVE_PRODUCT_FROM_FAV,\n  data,\n  id\n});\n\nexport const removeProductFromCart = (data, id) => ({\n  type: REMOVE_PRODUCT_FROM_CART,\n  data,\n  id\n});\n","export const SET_PRODUCT = 'SET_PRODUCT';\nexport const SET_MODAL = 'SET_MODAL';\nexport const CLEAR_MODAL = 'CLEAR_MODAL';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const GET_ALL_PRODUCT = 'GET_ALL_PRODUCT';\nexport const SET_ALL_PRODUCTS = 'SET_ALL_PRODUCTS';\nexport const ADD_PRODUCT_TO_FAV = 'ADD_PRODUCT_TO_FAV';\nexport const REMOVE_PRODUCT_FROM_CART = 'REMOVE_PRODUCT_FROM_CART';\nexport const REMOVE_PRODUCT_FROM_FAV = 'REMOVE_PRODUCT_FROM_FAV';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nconst CardTitleAndText = props => {\n  const { card } = props;\n  const { name, designer, onlyXItemsLeftStockLevel, price } = card;\n  const { currencyCode, retailPrice } = price;\n  return (\n    <>\n      <Card.Title>{name}</Card.Title>\n      <Card.Text>\n        <Col md={12}>\n          <Row>Designer: {designer}</Row>\n          <Row>Total Stock: {onlyXItemsLeftStockLevel}</Row>\n          <Row>Price: {`${currencyCode}${retailPrice}`}</Row>\n        </Col>\n      </Card.Text>\n    </>\n  );\n};\n\nCardTitleAndText.propTypes = {\n  card: PropTypes.object.isRequired\n};\n\nexport default CardTitleAndText;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardDeck, Button, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport {\n  setModal,\n  setProduct,\n  addToCart,\n  addProductToFav,\n  removeProductFromFav\n} from '../actions/productAction';\nimport '../App.css';\nimport CardTitleAndText from './cardTitleAndText';\n\nconst addProductToCart = (props, card) => {\n  props.setModal();\n  props.setProduct(card);\n  props.addToCart(card);\n};\n\nclass CardComponent extends React.PureComponent {\n  render() {\n    return (\n      <CardDeck className=\"carDeck\">\n        {this.props.products !== undefined\n          ? this.props.products.map(card => (\n              <Col md={3} key={card.id}>\n                <Card>\n                  <Card.Img\n                    variant=\"top\"\n                    alt={`${card.name}`}\n                    src={`${card.media.main.dynamic.url}`}\n                    height=\"200px\"\n                    width=\"160px\"\n                  />\n                  <Card.Body>\n                    {/* <Card.Title>{card.name}</Card.Title>\n                    <Card.Text>\n                      <Col md={12}>\n                        <Row>Designer: {card.designer}</Row>\n                        <Row>Total Stock: {card.onlyXItemsLeftStockLevel}</Row>\n                        <Row>\n                          Price:{' '}\n                          {`${card.price.currencyCode}${card.price.retailPrice}`}\n                        </Row>\n                      </Col>\n                    </Card.Text> */}\n                    <CardTitleAndText card={card} />\n                    <Button\n                      variant=\"primary\"\n                      onClick={() => addProductToCart(this.props, card)}\n                    >\n                      Add to cart\n                    </Button>\n                    {card.isFavorite ? (\n                      <Button\n                        className=\"secondary-button\"\n                        variant=\"secondary\"\n                        onClick={() =>\n                          this.props.removeProductFromFav(card, card.id)\n                        }\n                      >\n                        Remove Favorite\n                      </Button>\n                    ) : (\n                      <Button\n                        className=\"secondary-button\"\n                        variant=\"secondary\"\n                        onClick={() =>\n                          this.props.addProductToFav(card, card.id)\n                        }\n                      >\n                        Add Favorite\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))\n          : ''}\n      </CardDeck>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  products: state.products.allProucts\n});\n\nconst mapDispatchToProps = {\n  setModal,\n  setProduct,\n  addToCart,\n  addProductToFav,\n  removeProductFromFav\n};\n\nCardComponent.propTypes = {\n  products: PropTypes.array.isRequired,\n  addProductToFav: PropTypes.func.isRequired,\n  removeProductFromFav: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardComponent);\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Modal, Button, Card, Col, Row } from 'react-bootstrap';\nimport { clearModal } from '../actions/productAction';\nimport history from '../store/history';\nimport logo from '../logo.svg';\n\nconst handleCheckout = props => {\n  props.clearModal();\n  history.push('/cart');\n};\n\nconst ProductModal = props => (\n  <div>\n    <Modal show={props.isModalOpen} onHide={() => props.clearModal()}>\n      <Modal.Header closeButton>\n        <Modal.Title>Added to cart</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Card>\n          <Card.Img variant=\"top\" src={logo} height=\"100px\" width=\"160px\" />\n          <Card.Body>\n            <Card.Title>\n              {props.selectedProduct && props.selectedProduct.name}\n            </Card.Title>\n            <Card.Text>\n              <Col md={12}>\n                <Row>\n                  Designer:{' '}\n                  {props.selectedProduct && props.selectedProduct.designer}\n                </Row>\n                <Row>\n                  Total Stock:{' '}\n                  {props.selectedProduct &&\n                    props.selectedProduct.onlyXItemsLeftStockLevel}\n                </Row>\n              </Col>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => props.clearModal()}>\n          Continue Shopping\n        </Button>\n        <Button variant=\"primary\" onClick={() => handleCheckout(props)}>\n          Go to Checkout\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  isModalOpen: state.products.isModalOpen,\n  isModalClose: state.products.isModalClose,\n  selectedProduct: state.products.selectedProduct\n});\n\nconst mapDispatchToProps = {\n  clearModal\n};\n\nProductModal.propTypes = {\n  selectedProduct: PropTypes.object.isRequired,\n  clearModal: PropTypes.func.isRequired,\n  isModalOpen: PropTypes.bool.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CardComponent from './card';\nimport { getAllProduct } from '../actions/productAction';\nimport '../App.css';\nimport ProductModal from './productModal';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.getAllProduct();\n  }\n\n  render() {\n    return (\n      <>\n        <CardComponent />\n        <ProductModal />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  getAllProduct\n};\n\nApp.propTypes = {\n  getAllProduct: PropTypes.func.isRequired\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Navbar, Button, Nav } from 'react-bootstrap';\n\nimport { connect } from 'react-redux';\nimport history from '../store/history';\n\nconst NavBar = () => (\n  <>\n    <Navbar bg=\"dark\" variant=\"dark\" className=\"d-flex justify-content-between\">\n      <Navbar.Brand as={NavLink} to=\"/\">\n        HOME\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link as={NavLink} to=\"/\">\n          Home\n        </Nav.Link>\n        <Nav.Link as={NavLink} to=\"/fav\">\n          Favorite List\n        </Nav.Link>\n      </Nav>\n      <Button variant=\"outline-info\" onClick={() => history.push('/cart')}>\n        Cart\n      </Button>\n    </Navbar>\n  </>\n);\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(mapStateToProps)(NavBar);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Card, CardDeck, Button, Col } from 'react-bootstrap';\nimport CardTitleAndText from './cardTitleAndText';\nimport { removeProductFromCart } from '../actions/productAction';\n\nconst CartComponent = props => (\n  <CardDeck className=\"carDeck\">\n    {props.cartBucket.length !== 0 ? (\n      props.cartBucket.map(card => (\n        <Col md={4} key={card.id}>\n          <Card>\n            <Card.Img\n              variant=\"top\"\n              alt={`${card.name}`}\n              src={`${card.media.main.dynamic.url}`}\n              height=\"200px\"\n              width=\"160px\"\n            />\n            <Card.Body>\n              <CardTitleAndText card={card} />\n              <Button\n                variant=\"primary\"\n                onClick={() => props.removeProductFromCart(card, card.id)}\n              >\n                Remove\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n      ))\n    ) : (\n      <h3>Cart is empty.</h3>\n    )}\n  </CardDeck>\n);\n\nconst mapStateToProps = state => ({\n  cartBucket: state.products.cart\n});\n\nconst mapDispatchToProps = {\n  removeProductFromCart\n};\n\nCartComponent.propTypes = {\n  cartBucket: PropTypes.array.isRequired,\n  removeProductFromCart: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartComponent);\n","import {\n  SET_MODAL,\n  CLEAR_MODAL,\n  ADD_TO_CART,\n  SET_PRODUCT,\n  SET_ALL_PRODUCTS,\n  ADD_PRODUCT_TO_FAV,\n  REMOVE_PRODUCT_FROM_CART,\n  REMOVE_PRODUCT_FROM_FAV\n} from '../constants/productConstants';\n\nconst initialState = {\n  allProucts: [],\n  isModalOpen: false,\n  isModalClose: true,\n  selectedProduct: null,\n  cart: [],\n  favList: []\n};\n\nexport default function productReducer(state = initialState, action) {\n  const { type, data } = action;\n  switch (type) {\n    case SET_ALL_PRODUCTS:\n      return {\n        ...state,\n        allProucts: data\n      };\n    case SET_PRODUCT:\n      return {\n        ...state,\n        selectedProduct: data\n      };\n    case SET_MODAL: {\n      return {\n        ...state,\n        isModalOpen: true\n      };\n    }\n    case CLEAR_MODAL: {\n      return {\n        ...state,\n        isModalOpen: false\n      };\n    }\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, data]\n      };\n    case ADD_PRODUCT_TO_FAV:\n      return {\n        ...state,\n        allProucts: state.allProucts.map(content =>\n          content.id === action.id ? { ...content, isFavorite: true } : content\n        ),\n        favList: [...state.favList, data]\n      };\n    case REMOVE_PRODUCT_FROM_CART:\n      return {\n        ...state,\n        cart: state.cart.filter(item => item.id !== action.id)\n      };\n    case REMOVE_PRODUCT_FROM_FAV:\n      return {\n        ...state,\n        allProucts: state.allProucts.map(content =>\n          content.id === action.id ? { ...content, isFavorite: false } : content\n        ),\n        favList: state.favList.filter(item => item.id !== action.id)\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from 'redux';\nimport productReducer from './productReducer';\n\nconst rootReducer = combineReducers({\n  products: productReducer\n});\n\nexport default rootReducer;\n","import { put, takeEvery } from 'redux-saga/effects';\nimport Axios from 'axios';\nimport { setAllProducts } from '../actions/productAction';\nimport { GET_ALL_PRODUCT } from '../constants/productConstants';\n\nexport default function* getAllProducts() {\n  const responseBody = yield Axios.get(\n    'https://api.jsoneditoronline.org/v1/docs/b48e27bd6f55413eaf796c70dc3e96eb/data'\n  ).then(res => res.data);\n\n  yield put(setAllProducts(responseBody.products));\n}\n\nexport function* watchProductCommands() {\n  yield takeEvery(GET_ALL_PRODUCT, getAllProducts);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { watchProductCommands } from './productSaga';\n\nexport default function* rootSaga() {\n  yield all([fork(watchProductCommands)]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Card, CardDeck, Button, Col } from 'react-bootstrap';\nimport { removeProductFromFav } from '../actions/productAction';\nimport CardTitleAndText from './cardTitleAndText';\n\nconst FavList = props => (\n  <CardDeck className=\"carDeck\">\n    {props.favList.length !== 0 ? (\n      props.favList.map(card => (\n        <Col md={4} key={card.id}>\n          <Card>\n            <Card.Img\n              variant=\"top\"\n              alt={`${card.name}`}\n              src={`${card.media.main.dynamic.url}`}\n              height=\"200px\"\n              width=\"160px\"\n            />\n            <Card.Body>\n              <CardTitleAndText card={card} />\n              <Button\n                variant=\"secondary\"\n                onClick={() => props.removeProductFromFav(card, card.id)}\n              >\n                Remove from list\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n      ))\n    ) : (\n      <h3>Favorite list is empty.</h3>\n    )}\n  </CardDeck>\n);\n\nconst mapStateToProps = state => ({\n  favList: state.products.favList\n});\n\nconst mapDispatchToProps = {\n  removeProductFromFav\n};\n\nFavList.propTypes = {\n  favList: PropTypes.array.isRequired,\n  removeProductFromFav: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavList);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { Row, Col } from 'react-bootstrap';\nimport App from './components';\nimport NavBar from './components/navBar';\nimport CartComponent from './components/cart';\nimport configureStore from './store/rootStore';\nimport history from './store/history';\nimport FavList from './components/favList';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst rootstore = configureStore();\n\nReactDOM.render(\n  <Provider store={rootstore}>\n    <Row>\n      <Col md={12}>\n        <Router history={history}>\n          <NavBar />\n          <Switch>\n            <Route path=\"/cart\" component={CartComponent} />\n            <Route path=\"/fav\" component={FavList} />\n            <Route path=\"/\" component={App} />\n          </Switch>\n        </Router>\n      </Col>\n    </Row>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from '../reducers/rootReducer';\nimport rootSaga from '../sagas/rootSaga';\n\nexport default function configureStore() {\n  const sagaMiddleware = createSagaMiddleware();\n  let enhancer;\n  if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n    enhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(\n      applyMiddleware(sagaMiddleware)\n    );\n  } else {\n    enhancer = compose(applyMiddleware(sagaMiddleware));\n  }\n  const store = createStore(rootReducer, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}